{"version":3,"sources":["components/NavbarSearch.js","components/ContentBox.js","App.js","reportWebVitals.js","index.js"],"names":["NavbarSearch","onHandleSubmit","useState","isOpen","setIsOpen","spokemon","setSpokemon","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","Form","inline","onSubmit","event","preventDefault","Input","type","name","placeholder","value","onChange","target","Button","ContentBox","props","data","setData","useEffect","promises","i","push","axios","get","Promise","all","then","responses","pokemon","setPokemon","handleSubmit","a","response","Container","Row","Col","xs","sm","md","Card","CardHeader","CardImg","top","width","src","sprites","front_default","CardBody","CardTitle","tag","CardText","id","types","weight","height","map","Spinner","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.521a26a4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    Button,\n    Form,\n    Input,\n} from \"reactstrap\";\n\nexport default function NavbarSearch({ onHandleSubmit }) {\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => setIsOpen(!isOpen);\n\n    const [spokemon, setSpokemon] = useState(\"\");\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        onHandleSubmit(spokemon);\n    };\n\n    const handleChange = (event) => {\n        setSpokemon(event.target.value);\n    };\n\n    return (\n        <div>\n            <Navbar color=\"dark\" dark expand=\"md\">\n                <NavbarBrand href=\"/\">React Pokedex</NavbarBrand>\n                <NavbarToggler onClick={toggle} />\n                <Collapse isOpen={isOpen} navbar>\n                    <Nav className=\"ml-auto\" navbar>\n                        <Form inline onSubmit={handleSubmit}>\n                            <Input\n                                type=\"text\"\n                                name=\"pokemon\"\n                                placeholder=\"Pokemon\"\n                                value={spokemon}\n                                onChange={handleChange}\n                            />\n                            <Button className=\"bg-success ml-2\">Search</Button>\n                        </Form>\n                    </Nav>\n                </Collapse>\n            </Navbar>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n    Container,\n    Row,\n    Col,\n    Spinner,\n    Card,\n    CardHeader,\n    CardImg,\n    CardText,\n    CardBody,\n    CardTitle,\n} from \"reactstrap\";\nimport axios from \"axios\";\nimport NavbarSearch from \"./NavbarSearch\";\n\nfunction ContentBox(props) {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        let promises = [];\n\n        for (let i = 1; i <= 151; i++) {\n            promises.push(axios.get(\"https://pokeapi.co/api/v2/pokemon/\" + i));\n        }\n\n        Promise.all(promises).then(function (responses) {\n            setData(responses);\n        });\n    }, []);\n\n    const [pokemon, setPokemon] = useState(null);\n    const handleSubmit = async (spokemon) => {\n        if (spokemon) {\n            await axios\n                .get(\"https://pokeapi.co/api/v2/pokemon/\" + spokemon)\n                .then(function (response) {\n                    setPokemon(response.data);\n                });\n        }\n    };\n\n    return (\n        <>\n            <NavbarSearch onHandleSubmit={handleSubmit} />\n            {pokemon && (\n                <Container>\n                    <Row className=\"mt-3 d-fex justify-content-center\">\n                        <Col\n                            xs=\"12\"\n                            sm=\"6\"\n                            md=\"4\"\n                            className=\"mb-2\"\n                            key={pokemon.id}\n                        >\n                            <Card className=\"rounded shadow\">\n                                <CardHeader>\n                                    <CardImg\n                                        top\n                                        width=\"100%\"\n                                        src={pokemon.sprites.front_default}\n                                    />\n                                </CardHeader>\n                                <CardBody>\n                                    <CardTitle\n                                        className=\"text-center text-capitalize\"\n                                        tag=\"h5\"\n                                    >\n                                        {\" \"}\n                                        {pokemon.name}\n                                    </CardTitle>\n                                    <CardText>\n                                        <strong>ID Pokedex:</strong>{\" \"}\n                                        {pokemon.id} <br />\n                                        <strong>Type:</strong>{\" \"}\n                                        {pokemon.types[0].type.name} <br />\n                                        <strong>Weight:</strong>{\" \"}\n                                        {pokemon.weight / 10}Kg <br />\n                                        <strong>Height:</strong>{\" \"}\n                                        {pokemon.height / 10}M\n                                    </CardText>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            )}\n\n            {data && !pokemon && (\n                <Container>\n                    <Row className=\"mt-3\">\n                        {data.map((data) => (\n                            <Col\n                                xs=\"12\"\n                                sm=\"6\"\n                                md=\"3\"\n                                className=\"mb-2\"\n                                key={data.data.id}\n                            >\n                                <Card className=\"rounded shadow\">\n                                    <CardHeader>\n                                        <CardImg\n                                            top\n                                            width=\"100%\"\n                                            src={\n                                                data.data.sprites.front_default\n                                            }\n                                        />\n                                    </CardHeader>\n                                    <CardBody>\n                                        <CardTitle\n                                            className=\"text-center text-capitalize\"\n                                            tag=\"h5\"\n                                        >\n                                            {\" \"}\n                                            {data.data.name}\n                                        </CardTitle>\n                                        <CardText>\n                                            <strong>ID Pokedex:</strong>{\" \"}\n                                            {data.data.id} <br />\n                                            <strong>Type:</strong>{\" \"}\n                                            {data.data.types[0].type.name}{\" \"}\n                                            <br />\n                                            <strong>Weight:</strong>{\" \"}\n                                            {data.data.weight / 10}Kg <br />\n                                            <strong>Height:</strong>{\" \"}\n                                            {data.data.height / 10}M\n                                        </CardText>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        ))}\n                    </Row>\n                </Container>\n            )}\n\n            {!data && (\n                <div className=\"text-center mt-5\">\n                    <Spinner color=\"primary\" />\n                    <h1 className=\"text-danger\">Pokedex Initializing...</h1>\n                </div>\n            )}\n        </>\n    );\n}\n\nexport default ContentBox;\n","import ContentBox from \"./components/ContentBox\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n    return (\n        <>\n            <ContentBox />\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}